from dotenv import load_dotenv
import os
import telebot
import pyotp
import json
import base64
from cryptography.fernet import Fernet
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")
ALLOWED_USER_ID = os.getenv("ALLOWED_USER_ID")
DATA_FILE = "totp_data.json"

if not ENCRYPTION_KEY:
    raise Exception("‚ùå –í .env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ENCRYPTION_KEY")

fernet = Fernet(ENCRYPTION_KEY.encode())
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "rb") as f:
        try:
            user_data = json.loads(fernet.decrypt(f.read()))
        except:
            user_data = {}
else:
    user_data = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, "wb") as f:
        f.write(fernet.encrypt(json.dumps(user_data).encode()))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_authorized(message):
    return str(message.chat.id) == str(ALLOWED_USER_ID)

@bot.message_handler(commands=['start'])
def start(message):
    if not is_authorized(message):
        bot.reply_to(message, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç! üõ°Ô∏è –Ø —Ç–≤–æ–π 2FA –±–æ—Ç.
–ö–æ–º–∞–Ω–¥—ã:
/add - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á
/list - –≤—ã–±—Ä–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥
/delete - —É–¥–∞–ª–∏—Ç—å
/reset - —É–¥–∞–ª–∏—Ç—å –≤—Å—ë""")

@bot.message_handler(commands=['add'])
def add(message):
    if not is_authorized(message):
        return
    bot.send_message(message.chat.id, "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å–µ–∫—Ä–µ—Ç –∏ –ø–æ–¥–ø–∏—Å—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:\n`JBSWY3DPEHPK3PXP GitHub`", parse_mode="Markdown")
    bot.register_next_step_handler(message, process_add)

def process_add(message):
    if not is_authorized(message):
        return
    chat_id = str(message.chat.id)
    parts = message.text.strip().split(" ", 1)
    if len(parts) != 2:
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç: `—Å–µ–∫—Ä–µ—Ç –ø–æ–¥–ø–∏—Å—å`", parse_mode="Markdown")
        return
    secret, label = parts
    try:
        pyotp.TOTP(secret).now()
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ–∫—Ä–µ—Ç.")
        return
    user_data.setdefault(chat_id, []).append({"secret": secret, "label": label})
    save_data()
    bot.send_message(message.chat.id, f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ *{label}*", parse_mode="Markdown")

@bot.message_handler(commands=['list'])
def list_keys(message):
    if not is_authorized(message):
        return
    chat_id = str(message.chat.id)
    if not user_data.get(chat_id):
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.")
        return
    markup = InlineKeyboardMarkup()
    for idx, entry in enumerate(user_data[chat_id]):
        markup.add(InlineKeyboardButton(entry['label'], callback_data=f"get_{idx}"))
    bot.send_message(message.chat.id, "üî≥ –í—ã–±–µ—Ä–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("get_"))
def send_code(call):
    if str(call.message.chat.id) != str(ALLOWED_USER_ID):
        return
    chat_id = str(call.message.chat.id)
    index = int(call.data.split("_")[1])
    entry = user_data[chat_id][index]
    code = pyotp.TOTP(entry['secret']).now()
    bot.send_message(call.message.chat.id, f"üîê *{entry['label']}*: `{code}`", parse_mode="Markdown")

@bot.message_handler(commands=['reset'])
def reset_all(message):
    if not is_authorized(message):
        return
    chat_id = str(message.chat.id)
    user_data[chat_id] = []
    save_data()
    bot.send_message(message.chat.id, "üóëÔ∏è –í—Å–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã.")

@bot.message_handler(commands=['delete'])
def delete_key(message):
    if not is_authorized(message):
        return
    chat_id = str(message.chat.id)
    if not user_data.get(chat_id):
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    markup = InlineKeyboardMarkup()
    for idx, entry in enumerate(user_data[chat_id]):
        markup.add(InlineKeyboardButton(f"‚ùå {entry['label']}", callback_data=f"del_{idx}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_"))
def confirm_delete(call):
    if str(call.message.chat.id) != str(ALLOWED_USER_ID):
        return
    chat_id = str(call.message.chat.id)
    index = int(call.data.split("_")[1])
    label = user_data[chat_id][index]['label']
    del user_data[chat_id][index]
    save_data()
    bot.send_message(call.message.chat.id, f"üóëÔ∏è –ö–ª—é—á *{label}* —É–¥–∞–ª—ë–Ω.", parse_mode="Markdown")

@bot.message_handler(commands=['test'])
def test_bot(message):
    if not is_authorized(message):
        return
    test_secret = "JBSWY3DPEHPK3PXP"
    label = "–¢–µ—Å—Ç–æ–≤—ã–π"
    try:
        totp = pyotp.TOTP(test_secret)
        code = totp.now()
        valid = len(code) == 6 and code.isdigit()
        result = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if valid else "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"
        bot.send_message(message.chat.id, f"""üîç –¢–µ—Å—Ç:
–°–µ–∫—Ä–µ—Ç: `{test_secret}`
–ö–æ–¥: `{code}`
–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}""", parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ: {str(e)}")

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling()
